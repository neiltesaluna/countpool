AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack is to generate an EC2 instance where it's accessible using SSM"
Parameters:
  SubnetId1:
    Description: Subnet 1 Id for EC2 ASG and Loadbalancer resource, we can either reference an existing aws subnet
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0d8b7c79c168639a9

  SubnetId2:
    Description: Subnet 2 Id for the Loadbalancer resource, for application load balancers, we need two subnets
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0e80b983f84febe4f

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id for the stack
    Default: vpc-000387cf04ba71caf
  
  DBName:
    Type: String
    Description: Name of the database for the DB instance (MySQL)
    Default: countpooldb

  DBMasterUsername:
    Type: String
    Description: Username for the DB instance
    Default: dbrootuser
  
  DBMasterPassword:
    Type: String
    Description: User password for the DB instance
    Default: dbrootpassword

  AppSecretKey:
    Type: String
    Description: Secret key for application
    Default: 6a9d627e3641cabd6e54740b019d3a40

Resources:
# creating ssm access role and security groups for ec2 instance
  ec2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # CloudWatchAgentServerPolicy
  
  ec2SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ec2SSMRole

# creating security groups for EC2 instance, RDS and load balancer
  containerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-container-sg
      GroupDescription: Security group for ec2-instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt loadBalancerSecurityGroup.GroupId

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-loadbalancer-sg
      GroupDescription: !Sub "Security group for ${AWS::StackName} load balancer cloudformation stack"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

# creating aplication load balancer for ec2 auto scaling group
  Ec2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-loadbalancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt loadBalancerSecurityGroup.GroupId
      Subnets: # referencing the public subnet, application load balancers need two subnets
        - !Ref SubnetId1
        - !Ref SubnetId2

  Ec2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Ec2TargetGroup
      LoadBalancerArn: !Ref Ec2LoadBalancer

  Ec2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: !Sub ${AWS::StackName}-target-group
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Protocol: HTTP
      Port: 80

# creating resources for ec2 auto scaling
  ec2ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: mySqlRds
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT10M
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId1
        - !Ref SubnetId2
      LaunchTemplate:
        LaunchTemplateId: !Ref ec2LaunchTemplate
        Version: !GetAtt ec2LaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref Ec2TargetGroup

  ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-09a5c873bc79530d9 # ubuntu server 22.04 LTS (64-bit x86)
        InstanceInitiatedShutdownBehavior: terminate
        SecurityGroupIds:
          - !GetAtt containerSecurityGroup.GroupId
        IamInstanceProfile: 
          Name: !Ref ec2SSMInstanceProfile
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              export DEBIAN_FRONTEND=noninteractive
              HOME="/home/ssm-user"
              HOSTNAME="countpool-app"
              NUMCORES=$(($(nproc)*2+1))
              useradd -m -d $HOME ssm-user
              usermod -a -G www-data ssm-user
              cat << EOF > /etc/sudoers.d/ssm-agent-users
              # User rules for ssm-user
              ssm-user ALL=(ALL) NOPASSWD:ALL
              EOF
              hostnamectl set-hostname "$HOSTNAME"
              apt-get -y update
              apt-get -y upgrade
              apt-get install python3-pip python3-venv nginx -y
              git clone https://github.com/neiltesaluna/countpool.git $HOME/countpool
              python3 -m venv $HOME/countpool/.venv
              $HOME/countpool/.venv/bin/pip install -r $HOME/countpool/requirements.txt
              cat << EOF > /etc/systemd/system/countpool.service
              [Unit]
              Description=Gunicorn instance to serve myproject
              ConditionPathExists=$HOME/countpool/.venv/bin/gunicorn

              [Service]
              User=ssm-user
              Group=www-data
              Environment="MYSQL_DATABASE=${dbname}"
              Environment="MYSQL_USER=${dbuser}"
              Environment="MYSQL_PASSWORD=${dbpassword}"
              Environment="MYSQL_PORT=${dbport}"
              Environment="MYSQL_HOST=${dbhost}"
              Environment="SECRET_KEY=${appsecret}"
              WorkingDirectory=$HOME/countpool/
              Environment="PATH=$HOME/countpool/.venv/bin"
              ExecStart=$HOME/countpool/.venv/bin/gunicorn --workers $NUMCORES wsgi:app
              Restart=on-failure

              [Install]
              WantedBy=multi-user.target
              EOF
              cat << EOF > /etc/nginx/sites-available/countpool
              server {
                listen 80;
                server_name $HOSTNAME;
                
                location / {
                    include proxy_params;
                    proxy_pass http://127.0.0.1:8000;
                }
              }
              EOF
              rm /etc/nginx/sites-enabled/default
              ln -s /etc/nginx/sites-available/countpool /etc/nginx/sites-enabled/
              systemctl start countpool
              systemctl enable countpool
              systemctl restart nginx

            - dbname: !Ref DBName
              dbport: 3306
              dbuser: !Ref DBMasterUsername
              dbpassword: !Ref DBMasterPassword
              dbhost: !GetAtt mySqlRds.Endpoint.Address
              appsecret: !Ref AppSecretKey

Outputs:
  LoadBalancerDNS:
    Description: The DNS name for the load balancer where we can use to visit the website
    Value: !GetAtt Ec2LoadBalancer.DNSName