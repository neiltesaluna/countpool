AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack is to generate an EC2 instance where it's accessible using SSM"
Parameters:
  AvailabilityZone:
    Type: String
    Default: ap-southeast-2a

Resources:

# Creating own VPC, subnet and internet gateway for this stack
  ec2CfnInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachVpctoGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !GetAtt ec2CfnVPC.VpcId
      InternetGatewayId: !GetAtt ec2CfnInternetGateway.InternetGatewayId

  ec2CfnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  ec2CfnSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  !Ref ec2CfnVPC
      CidrBlock: 172.16.0.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AvailabilityZone

  # Some route tables for our subnets:
  ec2PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ec2CfnVPC

  ec2PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachVpctoGateway
    Properties:
      RouteTableId: !Ref ec2PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ec2CfnInternetGateway

  ec2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ec2CfnSubnet
      RouteTableId: !Ref ec2PublicRouteTable

# creating ssm access role and security groups for ec2 instance
  ec2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # CloudWatchAgentServerPolicy
  
  ec2SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ec2SSMRole

  containerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-sg
      GroupDescription: Security group for ec2-instance
      VpcId: !Ref ec2CfnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

# creating resources for ec2 auto scaling
  ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-09a5c873bc79530d9 # ubuntu server 22.04 LTS (64-bit x86)
        InstanceInitiatedShutdownBehavior: terminate
        SecurityGroupIds:
          - !GetAtt containerSecurityGroup.GroupId
        IamInstanceProfile: 
          Name: !Ref ec2SSMInstanceProfile
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              export DEBIAN_FRONTEND=noninteractive
              HOME="/home/ssm-user"
              HOSTNAME="countpool-app"
              NUMCORES=$(($(nproc)*2+1))
              useradd -m -d $HOME ssm-user
              usermod -a -G www-data ssm-user
              cat << EOF > /etc/sudoers.d/ssm-agent-users
              # User rules for ssm-user
              ssm-user ALL=(ALL) NOPASSWD:ALL
              EOF
              hostnamectl set-hostname "$HOSTNAME"
              apt-get -y update
              apt-get -y upgrade
              apt-get install python3-pip python3-venv nginx -y
              git clone https://github.com/neiltesaluna/countpool.git $HOME/countpool
              python3 -m venv $HOME/countpool/.venv
              $HOME/countpool/.venv/bin/pip install -r $HOME/countpool/requirements.txt
              cat << EOF > /etc/systemd/system/countpool.service
              [Unit]
              Description=Gunicorn instance to serve myproject
              After=network.target

              [Service]
              User=ssm-user
              Group=www-data
              WorkingDirectory=$HOME/countpool/
              Environment="PATH=$HOME/countpool/.venv/bin"
              ExecStart=$HOME/countpool/.venv/bin/gunicorn --workers $NUMCORES wsgi:app

              [Install]
              WantedBy=multi-user.target
              EOF
              cat << EOF > /etc/nginx/sites-available/countpool
              server {
                listen 80;
                server_name $HOSTNAME;
                
                location / {
                    include proxy_params;
                    proxy_pass http://127.0.0.1:8000;
                }
              }
              EOF
              rm /etc/nginx/sites-enabled/default
              ln -s /etc/nginx/sites-available/countpool /etc/nginx/sites-enabled/
              systemctl start countpool
              systemctl enable countpool
              systemctl restart nginx

  ec2ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref ec2CfnSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref ec2LaunchTemplate
        Version: !GetAtt ec2LaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'

Outputs:
  ec2VPCId:
    Description: VPC Id generated from this stack
    Value: !GetAtt ec2CfnVPC.VpcId

  ec2SubnetId:
    Description: Subnet Id generated from this stack
    Value: !GetAtt ec2CfnSubnet.SubnetId